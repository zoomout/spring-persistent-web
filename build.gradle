import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

plugins {
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id "org.flywaydb.flyway" version "6.0.6"
    id 'com.adarshr.test-logger' version '2.0.0'
    id 'com.bmuschko.docker-remote-api' version '5.2.0'
}

group = 'com.bogdan.spring-persistent-web'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
}

test {
    useJUnitPlatform()
}


// Integration tests //

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

check.dependsOn integrationTest

task copyJar(type: Copy) {
    from jar
    into 'build/docker'
}

task createDockerfile(type: Dockerfile) {
    from('openjdk:11.0.4-jre-slim')
    copyFile("spring-persistent-web-${version}.jar", '/app/spring-persistent-web.jar')
    entryPoint('java')
    defaultCommand('-jar', '/app/spring-persistent-web.jar')
    exposePort(10080)
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn bootJar
    dependsOn copyJar
    dependsOn createDockerfile
    tags.add("zoomout/spring-persistent-web:latest")
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    targetImageId buildDockerImage.getImageId()
    containerName = 'spring-persistent-web'
    portBindings = ['10080:8080']
    autoRemove = true
}